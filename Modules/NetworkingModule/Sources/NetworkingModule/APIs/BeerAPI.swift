//
// BeerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BeerAPI {

    /**

     - parameter beerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func beersBeerIdGet(beerId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Beer?, _ error: Error?) -> Void)) -> RequestTask {
        return beersBeerIdGetWithRequestBuilder(beerId: beerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /beers/{beerId}
     - Get single beer
     - parameter beerId: (path)  
     - returns: RequestBuilder<Beer> 
     */
    open class func beersBeerIdGetWithRequestBuilder(beerId: Int) -> RequestBuilder<Beer> {
        var localVariablePath = "/beers/{beerId}"
        let beerIdPreEscape = "\(APIHelper.mapValueToPathItem(beerId))"
        let beerIdPostEscape = beerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{beerId}", with: beerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Beer>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter abvGt: (query) Returns all beers with ABV greater than the supplied number (optional)
     - parameter abvLt: (query) Returns all beers with ABV less than the supplied number (optional)
     - parameter ibuGt: (query) Returns all beers with IBU greater than the supplied number (optional)
     - parameter ibuLt: (query) Returns all beers with IBU less than the supplied number (optional)
     - parameter beerName: (query) Returns all beers matching the supplied name (this will match partial strings as well so e.g punk will return Punk IPA), if you need to add spaces just add an underscore (_). (optional)
     - parameter page: (query) Number of page (optional)
     - parameter perPage: (query) Per page (optional)
     - parameter brewedBefore: (query) Returns all beers brewed before this date, the date format is mm-yyyy e.g 10-2011 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func beersGet(abvGt: Int? = nil, abvLt: Int? = nil, ibuGt: Int? = nil, ibuLt: Int? = nil, beerName: String? = nil, page: Int? = nil, perPage: Int? = nil, brewedBefore: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Beer]?, _ error: Error?) -> Void)) -> RequestTask {
        return beersGetWithRequestBuilder(abvGt: abvGt, abvLt: abvLt, ibuGt: ibuGt, ibuLt: ibuLt, beerName: beerName, page: page, perPage: perPage, brewedBefore: brewedBefore).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /beers
     - Auto generated using Swagger Inspector
     - parameter abvGt: (query) Returns all beers with ABV greater than the supplied number (optional)
     - parameter abvLt: (query) Returns all beers with ABV less than the supplied number (optional)
     - parameter ibuGt: (query) Returns all beers with IBU greater than the supplied number (optional)
     - parameter ibuLt: (query) Returns all beers with IBU less than the supplied number (optional)
     - parameter beerName: (query) Returns all beers matching the supplied name (this will match partial strings as well so e.g punk will return Punk IPA), if you need to add spaces just add an underscore (_). (optional)
     - parameter page: (query) Number of page (optional)
     - parameter perPage: (query) Per page (optional)
     - parameter brewedBefore: (query) Returns all beers brewed before this date, the date format is mm-yyyy e.g 10-2011 (optional)
     - returns: RequestBuilder<[Beer]> 
     */
    open class func beersGetWithRequestBuilder(abvGt: Int? = nil, abvLt: Int? = nil, ibuGt: Int? = nil, ibuLt: Int? = nil, beerName: String? = nil, page: Int? = nil, perPage: Int? = nil, brewedBefore: String? = nil) -> RequestBuilder<[Beer]> {
        let localVariablePath = "/beers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "abv_gt": abvGt,
            "abv_lt": abvLt,
            "ibu_gt": ibuGt,
            "ibu_lt": ibuLt,
            "beer_name": beerName,
            "page": page,
            "per_page": perPage,
            "brewed_before": brewedBefore,
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Beer]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func beersRandomGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Beer?, _ error: Error?) -> Void)) -> RequestTask {
        return beersRandomGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /beers/random
     - Get random beer
     - returns: RequestBuilder<Beer> 
     */
    open class func beersRandomGetWithRequestBuilder() -> RequestBuilder<Beer> {
        let localVariablePath = "/beers/random"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Beer>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
