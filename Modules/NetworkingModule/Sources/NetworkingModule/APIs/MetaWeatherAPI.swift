//
// MetaWeatherAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MetaWeatherAPI {

    /**
     Find a location
     
     - parameter query: (query) Full or short name of a city (optional)
     - parameter lattlong: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func locationSearchGet(query: String? = nil, lattlong: [Double]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Location]?, _ error: Error?) -> Void)) -> RequestTask {
        return locationSearchGetWithRequestBuilder(query: query, lattlong: lattlong).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find a location
     - GET /location/search
     - parameter query: (query) Full or short name of a city (optional)
     - parameter lattlong: (query)  (optional)
     - returns: RequestBuilder<[Location]> 
     */
    open class func locationSearchGetWithRequestBuilder(query: String? = nil, lattlong: [Double]? = nil) -> RequestBuilder<[Location]> {
        let localVariablePath = "/location/search"
        let localVariableURLString = OpenAPIClientAPI.basePath2 + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query,
            "lattlong": lattlong,
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Location]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Location information, and a 5 day forecast
     
     - parameter woeid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func locationWoeidGet(woeid: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Forecast?, _ error: Error?) -> Void)) -> RequestTask {
        return locationWoeidGetWithRequestBuilder(woeid: woeid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Location information, and a 5 day forecast
     - GET /location/{woeid}/
     - parameter woeid: (path)  
     - returns: RequestBuilder<Forecast> 
     */
    open class func locationWoeidGetWithRequestBuilder(woeid: Int) -> RequestBuilder<Forecast> {
        var localVariablePath = "/location/{woeid}/"
        let woeidPreEscape = "\(APIHelper.mapValueToPathItem(woeid))"
        let woeidPostEscape = woeidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{woeid}", with: woeidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath2 + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Forecast>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Load weather image
     
     - parameter weather: (path) Abbreviation of weathere icon 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func staticImgWeatherPngWeatherPngGet(weather: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return staticImgWeatherPngWeatherPngGetWithRequestBuilder(weather: weather).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Load weather image
     - GET /static/img/weather/png/{weather}.png
     - parameter weather: (path) Abbreviation of weathere icon 
     - returns: RequestBuilder<URL> 
     */
    open class func staticImgWeatherPngWeatherPngGetWithRequestBuilder(weather: String) -> RequestBuilder<URL> {
        var localVariablePath = "/static/img/weather/png/{weather}.png"
        let weatherPreEscape = "\(APIHelper.mapValueToPathItem(weather))"
        let weatherPostEscape = weatherPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{weather}", with: weatherPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath3 + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
