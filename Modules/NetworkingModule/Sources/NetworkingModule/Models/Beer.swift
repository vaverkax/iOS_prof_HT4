//
// Beer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Beer: Codable, JSONEncodable {

    public var id: Double?
    public var name: String?
    public var tagline: String?
    public var firstBrewed: String?
    public var description: String?
    public var imageUrl: String?
    public var abv: Double?
    public var targetFg: Double?
    public var targetOg: Double?
    public var ph: Double?
    public var attenuationLevel: Double?
    public var volume: BeerVolume?
    public var boilVolume: BeerVolume?
    public var method: BeerMethod?
    public var ingredients: BeerIngredients?
    public var foodPairing: [String]?
    public var brewersTips: String?
    public var contributedBy: String?

    public init(id: Double? = nil, name: String? = nil, tagline: String? = nil, firstBrewed: String? = nil, description: String? = nil, imageUrl: String? = nil, abv: Double? = nil, targetFg: Double? = nil, targetOg: Double? = nil, ph: Double? = nil, attenuationLevel: Double? = nil, volume: BeerVolume? = nil, boilVolume: BeerVolume? = nil, method: BeerMethod? = nil, ingredients: BeerIngredients? = nil, foodPairing: [String]? = nil, brewersTips: String? = nil, contributedBy: String? = nil) {
        self.id = id
        self.name = name
        self.tagline = tagline
        self.firstBrewed = firstBrewed
        self.description = description
        self.imageUrl = imageUrl
        self.abv = abv
        self.targetFg = targetFg
        self.targetOg = targetOg
        self.ph = ph
        self.attenuationLevel = attenuationLevel
        self.volume = volume
        self.boilVolume = boilVolume
        self.method = method
        self.ingredients = ingredients
        self.foodPairing = foodPairing
        self.brewersTips = brewersTips
        self.contributedBy = contributedBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case tagline
        case firstBrewed = "first_brewed"
        case description
        case imageUrl = "image_url"
        case abv
        case targetFg = "target_fg"
        case targetOg = "target_og"
        case ph
        case attenuationLevel = "attenuation_level"
        case volume
        case boilVolume = "boil_volume"
        case method
        case ingredients
        case foodPairing = "food_pairing"
        case brewersTips = "brewers_tips"
        case contributedBy = "contributed_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(tagline, forKey: .tagline)
        try container.encodeIfPresent(firstBrewed, forKey: .firstBrewed)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(imageUrl, forKey: .imageUrl)
        try container.encodeIfPresent(abv, forKey: .abv)
        try container.encodeIfPresent(targetFg, forKey: .targetFg)
        try container.encodeIfPresent(targetOg, forKey: .targetOg)
        try container.encodeIfPresent(ph, forKey: .ph)
        try container.encodeIfPresent(attenuationLevel, forKey: .attenuationLevel)
        try container.encodeIfPresent(volume, forKey: .volume)
        try container.encodeIfPresent(boilVolume, forKey: .boilVolume)
        try container.encodeIfPresent(method, forKey: .method)
        try container.encodeIfPresent(ingredients, forKey: .ingredients)
        try container.encodeIfPresent(foodPairing, forKey: .foodPairing)
        try container.encodeIfPresent(brewersTips, forKey: .brewersTips)
        try container.encodeIfPresent(contributedBy, forKey: .contributedBy)
    }
}

