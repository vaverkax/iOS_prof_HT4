//
// Forecast.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Forecast: Codable, JSONEncodable {

    public var consolidatedWeather: [ForecastConsolidatedWeather]?
    public var time: String?
    public var sunRise: String?
    public var sunSet: String?
    public var timezoneName: String?
    public var parent: ForecastParent?
    public var sources: [ForecastSources]?
    public var title: String?
    public var locationType: String?
    public var woeid: Double?
    public var lattLong: String?
    public var timezone: String?

    public init(consolidatedWeather: [ForecastConsolidatedWeather]? = nil, time: String? = nil, sunRise: String? = nil, sunSet: String? = nil, timezoneName: String? = nil, parent: ForecastParent? = nil, sources: [ForecastSources]? = nil, title: String? = nil, locationType: String? = nil, woeid: Double? = nil, lattLong: String? = nil, timezone: String? = nil) {
        self.consolidatedWeather = consolidatedWeather
        self.time = time
        self.sunRise = sunRise
        self.sunSet = sunSet
        self.timezoneName = timezoneName
        self.parent = parent
        self.sources = sources
        self.title = title
        self.locationType = locationType
        self.woeid = woeid
        self.lattLong = lattLong
        self.timezone = timezone
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case consolidatedWeather = "consolidated_weather"
        case time
        case sunRise = "sun_rise"
        case sunSet = "sun_set"
        case timezoneName = "timezone_name"
        case parent
        case sources
        case title
        case locationType = "location_type"
        case woeid
        case lattLong = "latt_long"
        case timezone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(consolidatedWeather, forKey: .consolidatedWeather)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(sunRise, forKey: .sunRise)
        try container.encodeIfPresent(sunSet, forKey: .sunSet)
        try container.encodeIfPresent(timezoneName, forKey: .timezoneName)
        try container.encodeIfPresent(parent, forKey: .parent)
        try container.encodeIfPresent(sources, forKey: .sources)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(locationType, forKey: .locationType)
        try container.encodeIfPresent(woeid, forKey: .woeid)
        try container.encodeIfPresent(lattLong, forKey: .lattLong)
        try container.encodeIfPresent(timezone, forKey: .timezone)
    }
}

