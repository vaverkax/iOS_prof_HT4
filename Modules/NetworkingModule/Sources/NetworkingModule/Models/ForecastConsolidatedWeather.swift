//
// ForecastConsolidatedWeather.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ForecastConsolidatedWeather: Codable, JSONEncodable {

    public var id: Double?
    public var weatherStateName: String?
    public var weatherStateAbbr: String?
    public var windDirectionCompass: String?
    public var created: String?
    public var applicableDate: String?
    public var minTemp: Double?
    public var maxTemp: Double?
    public var theTemp: Double?
    public var windSpeed: Double?
    public var windDirection: Double?
    public var airPressure: Double?
    public var humidity: Double?
    public var visibility: Double?
    public var predictability: Double?

    public init(id: Double? = nil, weatherStateName: String? = nil, weatherStateAbbr: String? = nil, windDirectionCompass: String? = nil, created: String? = nil, applicableDate: String? = nil, minTemp: Double? = nil, maxTemp: Double? = nil, theTemp: Double? = nil, windSpeed: Double? = nil, windDirection: Double? = nil, airPressure: Double? = nil, humidity: Double? = nil, visibility: Double? = nil, predictability: Double? = nil) {
        self.id = id
        self.weatherStateName = weatherStateName
        self.weatherStateAbbr = weatherStateAbbr
        self.windDirectionCompass = windDirectionCompass
        self.created = created
        self.applicableDate = applicableDate
        self.minTemp = minTemp
        self.maxTemp = maxTemp
        self.theTemp = theTemp
        self.windSpeed = windSpeed
        self.windDirection = windDirection
        self.airPressure = airPressure
        self.humidity = humidity
        self.visibility = visibility
        self.predictability = predictability
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case weatherStateName = "weather_state_name"
        case weatherStateAbbr = "weather_state_abbr"
        case windDirectionCompass = "wind_direction_compass"
        case created
        case applicableDate = "applicable_date"
        case minTemp = "min_temp"
        case maxTemp = "max_temp"
        case theTemp = "the_temp"
        case windSpeed = "wind_speed"
        case windDirection = "wind_direction"
        case airPressure = "air_pressure"
        case humidity
        case visibility
        case predictability
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(weatherStateName, forKey: .weatherStateName)
        try container.encodeIfPresent(weatherStateAbbr, forKey: .weatherStateAbbr)
        try container.encodeIfPresent(windDirectionCompass, forKey: .windDirectionCompass)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(applicableDate, forKey: .applicableDate)
        try container.encodeIfPresent(minTemp, forKey: .minTemp)
        try container.encodeIfPresent(maxTemp, forKey: .maxTemp)
        try container.encodeIfPresent(theTemp, forKey: .theTemp)
        try container.encodeIfPresent(windSpeed, forKey: .windSpeed)
        try container.encodeIfPresent(windDirection, forKey: .windDirection)
        try container.encodeIfPresent(airPressure, forKey: .airPressure)
        try container.encodeIfPresent(humidity, forKey: .humidity)
        try container.encodeIfPresent(visibility, forKey: .visibility)
        try container.encodeIfPresent(predictability, forKey: .predictability)
    }
}

